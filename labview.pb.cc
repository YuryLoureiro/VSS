// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: labview.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "labview.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Labview {

namespace {

const ::google::protobuf::Descriptor* DataVel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataVel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_labview_2eproto() {
  protobuf_AddDesc_labview_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "labview.proto");
  GOOGLE_CHECK(file != NULL);
  DataVel_descriptor_ = file->message_type(0);
  static const int DataVel_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataVel, friend1velx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataVel, friend1vely_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataVel, friend2velx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataVel, friend2vely_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataVel, friend3velx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataVel, friend3vely_),
  };
  DataVel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataVel_descriptor_,
      DataVel::default_instance_,
      DataVel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataVel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataVel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataVel));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_labview_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataVel_descriptor_, &DataVel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_labview_2eproto() {
  delete DataVel::default_instance_;
  delete DataVel_reflection_;
}

void protobuf_AddDesc_labview_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rlabview.proto\022\007Labview\"\207\001\n\007DataVel\022\023\n\013"
    "friend1VelX\030\001 \002(\005\022\023\n\013friend1VelY\030\002 \002(\005\022\023"
    "\n\013friend2VelX\030\003 \002(\005\022\023\n\013friend2VelY\030\004 \002(\005"
    "\022\023\n\013friend3VelX\030\005 \002(\005\022\023\n\013friend3VelY\030\006 \002"
    "(\005", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "labview.proto", &protobuf_RegisterTypes);
  DataVel::default_instance_ = new DataVel();
  DataVel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_labview_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_labview_2eproto {
  StaticDescriptorInitializer_labview_2eproto() {
    protobuf_AddDesc_labview_2eproto();
  }
} static_descriptor_initializer_labview_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DataVel::kFriend1VelXFieldNumber;
const int DataVel::kFriend1VelYFieldNumber;
const int DataVel::kFriend2VelXFieldNumber;
const int DataVel::kFriend2VelYFieldNumber;
const int DataVel::kFriend3VelXFieldNumber;
const int DataVel::kFriend3VelYFieldNumber;
#endif  // !_MSC_VER

DataVel::DataVel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Labview.DataVel)
}

void DataVel::InitAsDefaultInstance() {
}

DataVel::DataVel(const DataVel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Labview.DataVel)
}

void DataVel::SharedCtor() {
  _cached_size_ = 0;
  friend1velx_ = 0;
  friend1vely_ = 0;
  friend2velx_ = 0;
  friend2vely_ = 0;
  friend3velx_ = 0;
  friend3vely_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataVel::~DataVel() {
  // @@protoc_insertion_point(destructor:Labview.DataVel)
  SharedDtor();
}

void DataVel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataVel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataVel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataVel_descriptor_;
}

const DataVel& DataVel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_labview_2eproto();
  return *default_instance_;
}

DataVel* DataVel::default_instance_ = NULL;

DataVel* DataVel::New() const {
  return new DataVel;
}

void DataVel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataVel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(friend1velx_, friend3vely_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataVel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Labview.DataVel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 friend1VelX = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend1velx_)));
          set_has_friend1velx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend1VelY;
        break;
      }

      // required int32 friend1VelY = 2;
      case 2: {
        if (tag == 16) {
         parse_friend1VelY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend1vely_)));
          set_has_friend1vely();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_friend2VelX;
        break;
      }

      // required int32 friend2VelX = 3;
      case 3: {
        if (tag == 24) {
         parse_friend2VelX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend2velx_)));
          set_has_friend2velx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_friend2VelY;
        break;
      }

      // required int32 friend2VelY = 4;
      case 4: {
        if (tag == 32) {
         parse_friend2VelY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend2vely_)));
          set_has_friend2vely();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_friend3VelX;
        break;
      }

      // required int32 friend3VelX = 5;
      case 5: {
        if (tag == 40) {
         parse_friend3VelX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend3velx_)));
          set_has_friend3velx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_friend3VelY;
        break;
      }

      // required int32 friend3VelY = 6;
      case 6: {
        if (tag == 48) {
         parse_friend3VelY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend3vely_)));
          set_has_friend3vely();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Labview.DataVel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Labview.DataVel)
  return false;
#undef DO_
}

void DataVel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Labview.DataVel)
  // required int32 friend1VelX = 1;
  if (has_friend1velx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friend1velx(), output);
  }

  // required int32 friend1VelY = 2;
  if (has_friend1vely()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friend1vely(), output);
  }

  // required int32 friend2VelX = 3;
  if (has_friend2velx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->friend2velx(), output);
  }

  // required int32 friend2VelY = 4;
  if (has_friend2vely()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->friend2vely(), output);
  }

  // required int32 friend3VelX = 5;
  if (has_friend3velx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->friend3velx(), output);
  }

  // required int32 friend3VelY = 6;
  if (has_friend3vely()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->friend3vely(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Labview.DataVel)
}

::google::protobuf::uint8* DataVel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Labview.DataVel)
  // required int32 friend1VelX = 1;
  if (has_friend1velx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friend1velx(), target);
  }

  // required int32 friend1VelY = 2;
  if (has_friend1vely()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friend1vely(), target);
  }

  // required int32 friend2VelX = 3;
  if (has_friend2velx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->friend2velx(), target);
  }

  // required int32 friend2VelY = 4;
  if (has_friend2vely()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->friend2vely(), target);
  }

  // required int32 friend3VelX = 5;
  if (has_friend3velx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->friend3velx(), target);
  }

  // required int32 friend3VelY = 6;
  if (has_friend3vely()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->friend3vely(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Labview.DataVel)
  return target;
}

int DataVel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 friend1VelX = 1;
    if (has_friend1velx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend1velx());
    }

    // required int32 friend1VelY = 2;
    if (has_friend1vely()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend1vely());
    }

    // required int32 friend2VelX = 3;
    if (has_friend2velx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend2velx());
    }

    // required int32 friend2VelY = 4;
    if (has_friend2vely()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend2vely());
    }

    // required int32 friend3VelX = 5;
    if (has_friend3velx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend3velx());
    }

    // required int32 friend3VelY = 6;
    if (has_friend3vely()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend3vely());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataVel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataVel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataVel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataVel::MergeFrom(const DataVel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend1velx()) {
      set_friend1velx(from.friend1velx());
    }
    if (from.has_friend1vely()) {
      set_friend1vely(from.friend1vely());
    }
    if (from.has_friend2velx()) {
      set_friend2velx(from.friend2velx());
    }
    if (from.has_friend2vely()) {
      set_friend2vely(from.friend2vely());
    }
    if (from.has_friend3velx()) {
      set_friend3velx(from.friend3velx());
    }
    if (from.has_friend3vely()) {
      set_friend3vely(from.friend3vely());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataVel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataVel::CopyFrom(const DataVel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataVel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DataVel::Swap(DataVel* other) {
  if (other != this) {
    std::swap(friend1velx_, other->friend1velx_);
    std::swap(friend1vely_, other->friend1vely_);
    std::swap(friend2velx_, other->friend2velx_);
    std::swap(friend2vely_, other->friend2vely_);
    std::swap(friend3velx_, other->friend3velx_);
    std::swap(friend3vely_, other->friend3vely_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataVel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataVel_descriptor_;
  metadata.reflection = DataVel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Labview

// @@protoc_insertion_point(global_scope)
